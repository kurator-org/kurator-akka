/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_kurator_akka_interpreters_PythonInterpreter */

#ifndef _Included_org_kurator_akka_interpreters_PythonInterpreter
#define _Included_org_kurator_akka_interpreters_PythonInterpreter
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_kurator_akka_interpreters_PythonInterpreter
 * Method:    run
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/util/HashMap;)Ljava/util/Map;
 */
JNIEXPORT jobject JNICALL Java_org_kurator_akka_interpreters_PythonInterpreter_run
  (JNIEnv *, jobject, jstring, jstring, jobject);

/*
 * Class:     org_kurator_akka_interpreters_PythonInterpreter
 * Method:    eval
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Ljava/util/Map;
 */
JNIEXPORT jobject JNICALL Java_org_kurator_akka_interpreters_PythonInterpreter_eval
  (JNIEnv *, jobject, jstring, jstring, jobject);

PyObject* request_dict(JNIEnv *env, jobject options) {
    PyObject *pDict, *pValue, *pKey, *pList;
    jboolean iscopy;

    jclass c_String = (*env)->FindClass(env, "java/lang/String");
    jclass c_Integer = (*env)->FindClass(env, "java/lang/Integer");
    jclass c_Boolean = (*env)->FindClass(env, "java/lang/Boolean");


    jmethodID m_IntValue = (*env)->GetMethodID(env, c_Integer, "intValue", "()I");
    jmethodID m_BoolValue = (*env)->GetMethodID(env, c_Boolean, "booleanValue", "()Z");



 // initialize the Java Map and List interfaces and methods
    jclass c_Map = (*env)->FindClass(env, "java/util/HashMap");
    jclass c_List = (*env)->FindClass(env, "java/util/List");

    jmethodID m_KeySet = (*env)->GetMethodID(env, c_Map, "keySet", "()Ljava/util/Set;");
    jmethodID m_Get = (*env)->GetMethodID(env, c_Map, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");

    jmethodID m_ListSize = (*env)->GetMethodID(env, c_List, "size", "()I");
    jmethodID m_ListGet = (*env)->GetMethodID(env, c_List, "get", "(I)Ljava/lang/Object;");

 // initialize the Java Set interface and methods
    jclass c_Set = (*env)->FindClass(env, "java/util/Set");

    jmethodID m_ToArray = (*env)->GetMethodID(env, c_Set, "toArray", "()[Ljava/lang/Object;");

            pDict = PyDict_New();

            // Get the Java Map key set and convert it to an array
            jobject set = (*env)->CallObjectMethod(env, options, m_KeySet);
            jobjectArray keys = (*env)->CallObjectMethod(env, set, m_ToArray);

            // Size is the length of the jobjectArray
            int jSize = (*env)->GetArrayLength(env, keys);

            // Get the parameters from the map
            for (int i = 0; i < jSize; i++) {

                // Get the key from java
                jstring jString = (*env)->GetObjectArrayElement(env, keys, i);
                char *key = (*env)->GetStringUTFChars(env, jString, &iscopy);

                //printf("key: %s", key);

                // Get the value from java
                jobject jObject = (*env)->CallObjectMethod(env, options, m_Get, jString);

                // Check if the value is a String int or boolean otherwise assume that it is a nested Map
                if ((*env)->IsSameObject(env, jObject, NULL) ) {
                    //printf(", value: null\n");

                    // Create the PyString objects
                    pKey = PyString_FromString(key);
                    pValue = Py_None;

                    // Add the item to the PyDict
                    PyDict_SetItem(pDict, pKey, pValue);
                } else if ((*env)->IsInstanceOf(env, jObject, c_String) == JNI_TRUE) {
                    char *value = (*env)->GetStringUTFChars(env, jObject, &iscopy);
                    //printf(", value: %s\n", value);

                    // Create the PyString objects
                    pKey = PyString_FromString(key);
                    pValue = PyString_FromString(value);

                    // Add the item to the PyDict
                    PyDict_SetItem(pDict, pKey, pValue);
                } else if ((*env)->IsInstanceOf(env, jObject, c_Integer) == JNI_TRUE) {
                    // Integer value
                    int value = (*env)->CallIntMethod(env, jObject, m_IntValue);
                    //printf(", value: %d\n", value);

                    // Create the PyInt objects
                    pKey = PyString_FromString(key);
                    pValue = PyInt_FromLong(value);

                    // Add the item to the PyDict
                    PyDict_SetItem(pDict, pKey, pValue);
                } else if ((*env)->IsInstanceOf(env, jObject, c_Boolean) == JNI_TRUE) {
                    // Boolean value
                    int value = (*env)->CallBooleanMethod(env, jObject, m_BoolValue);
                    //printf(", value: %d\n", value);

                    pKey = PyString_FromString(key);
                    pValue = PyBool_FromLong(value);

                    // Add the item to the PyDict
                    PyDict_SetItem(pDict, pKey, pValue);
                } else if ((*env)->IsInstanceOf(env, jObject, c_List) == JNI_TRUE) {
                    jint jSize = (*env)->CallIntMethod(env, jObject, m_ListSize);
                    //printf("it's a list! size: %d\n", jSize);

                    // Process the value as a list
                    pKey = PyString_FromString(key);
                    pList = PyList_New(jSize);

                    for (int i = 0; i < jSize; i++) {
                        jobject jElement = (*env)->CallObjectMethod(env, jObject, m_ListGet, i);
                        char* elem = (*env)->GetStringUTFChars(env, jElement, &iscopy);
                        pValue = PyString_FromString(elem);

                        //printf("%d: %s\n", i, elem);

                        PyList_SetItem(pList, i, pValue);
                    }

                    // Add the list to the PyDict
                    PyDict_SetItem(pDict, pKey, pList);
                } else {
                    // Process the value as a nested map and recursively call this
                    // function to create an inner python dict
                    pKey = PyString_FromString(key);
                    pValue = request_dict(env, jObject);

                    // Add the item to the PyDict
                    PyDict_SetItem(pDict, pKey, pValue);
                }

                Py_DECREF(pKey);
                Py_DECREF(pValue);
            }

            return pDict;
    }

jobject response_map(JNIEnv *env, PyObject *pDict) {
    PyObject *pList, *pKey, *pValue, *pElem;

    jclass c_Boolean = (*env)->FindClass(env, "java/lang/Boolean");
    jmethodID m_InitBool = (*env)->GetMethodID(env, c_Boolean, "<init>", "(Z)V");

    jclass c_Integer = (*env)->FindClass(env, "java/lang/Integer");
    jmethodID m_InitInt = (*env)->GetMethodID(env, c_Integer, "<init>", "(I)V");

    jclass c_Map = (*env)->FindClass(env, "java/util/HashMap");
    jclass c_List = (*env)->FindClass(env, "java/util/ArrayList");

    jmethodID m_ListInit = (*env)->GetMethodID(env, c_List, "<init>", "()V");
    jmethodID m_ListAdd = (*env)->GetMethodID(env, c_List, "add", "(ILjava/lang/Object;)V");

    jmethodID m_Init = (*env)->GetMethodID(env, c_Map, "<init>", "()V");
    jmethodID m_Put = (*env)->GetMethodID(env, c_Map, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");

                // Get a list of the keys from the python dict
                pList = PyDict_Keys(pDict);
                int map_len = PyList_Size(pList);

                // Create the response Java Map
                jobject jMap = (*env)->NewObject(env, c_Map, m_Init, map_len);

                // Iterate over return dictionary items
                for (int i = 0; i < map_len; i++) {

                    // Get the key and value from the python dict
                    pKey = PyList_GetItem(pList, i);
                    char* key = PyString_AsString(pKey);

                    pValue = PyDict_GetItem(pDict, pKey);

                    // Create Java strings for the key and value
                    jstring jKey = (*env)->NewStringUTF(env, key);

                    // If the value is a dict then recursively call this function,
                    // otherwise treat it as a string value
                    if (PyDict_Check(pValue)) {
                        jobject jValue = response_map(env, pValue);

                        // Put the key and value in the Java Map
                        (*env)->CallObjectMethod(env, jMap, m_Put, jKey, jValue);
                    } else if (PyString_Check(pValue)) {
                        char* value = PyString_AsString(pValue);
                        jstring jValue = (*env)->NewStringUTF(env, value);

                        // Put the key and value in the Java Map
                        (*env)->CallObjectMethod(env, jMap, m_Put, jKey, jValue);
                    } else if (PyBool_Check(pValue)) {
                        jobject jTrue = (*env)->NewObject(env, c_Boolean, m_InitBool, 1);
                        jobject jFalse = (*env)->NewObject(env, c_Boolean, m_InitBool, 0);

                        if (PyObject_IsTrue(pValue)) {
                            // Put the key and value in the Java Map
                            (*env)->CallObjectMethod(env, jMap, m_Put, jKey, jTrue);
                        } else {
                            (*env)->CallObjectMethod(env, jMap, m_Put, jKey, jFalse);
                        }
                    } else if (PyInt_Check(pValue)) {
                        int value = PyInt_AsLong(pValue);
                        jobject jValue = (*env)->NewObject(env, c_Integer, m_InitInt, value);

                        // Put the key and value in the Java Map
                        (*env)->CallObjectMethod(env, jMap, m_Put, jKey, jValue);
                    } else if (PyList_Check(pValue)) {
                        int size = PyList_Size(pValue);
                        //printf("size: %d\n", size);
                        jobject jList = (*env)->NewObject(env, c_List, m_ListInit, size);

                        for (int i = 0; i < size; i++) {
                            pElem = PyList_GetItem(pValue, i);
                            char* elem = PyString_AsString(pElem);

                            //printf("elem: %s\n", elem);
                            jstring jValue = (*env)->NewStringUTF(env, elem);

                            (*env)->CallObjectMethod(env, jList, m_ListAdd, i, jValue);
                        }

                        (*env)->CallObjectMethod(env, jMap, m_Put, jKey, jList);

                        //printf("the request contains a py list!");
                    }
                }

                return jMap;
}

#ifdef __cplusplus
}
#endif
#endif
